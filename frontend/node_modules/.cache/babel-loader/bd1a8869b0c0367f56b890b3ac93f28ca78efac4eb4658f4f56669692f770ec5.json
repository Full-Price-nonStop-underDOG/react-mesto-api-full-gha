{"ast":null,"code":"import { authenticationElemenetsApi } from './constants';\nclass Api {\n  constructor(_ref) {\n    let {\n      headers,\n      URL\n    } = _ref;\n    this._headers = headers;\n    this._url = URL;\n  }\n  _handlePromiseRequest(res) {\n    if (res.ok) {\n      return res.json();\n    } else throw new Error('ошибка');\n  }\n  async addLike(cardId, token) {\n    const response = await fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: {\n        ...this._headers,\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return this._handlePromiseRequest(response);\n  }\n  async removeLike(cardId) {\n    const response = await fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: {\n        ...this._headers,\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return this._handlePromiseRequest(response);\n  }\n  async getUserInfo(token) {\n    const response = await fetch(`${this._url}/users/me`, {\n      method: 'GET',\n      headers: {\n        ...this._headers,\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return this._handlePromiseRequest(response);\n  }\n  async getInitialCardsData(token) {\n    const response = await fetch(`${this._url}/cards`, {\n      headers: {\n        ...this._headers,\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return this._handlePromiseRequest(response);\n  }\n  getInitialData() {\n    return Promise.all([this.getInitialCardsData(), this.getUserInfo()]);\n  }\n  async editProfileInfo(data, token) {\n    console.log(data);\n    const response = await fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        ...this._headers,\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about,\n        avatar: data.avatar\n      })\n    });\n    return this._handlePromiseRequest(response);\n  }\n  async removeCard(cardId) {\n    const response = await fetch(`${this._url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    });\n    return this._handlePromiseRequest(response);\n  }\n  async addNewCard(data, token) {\n    const response = await fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: {\n        ...this._headers,\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    });\n    return this._handlePromiseRequest(response);\n  }\n  async getCard(cardId) {\n    const response = await fetch(`${this._url}/cards/${cardId}`, {\n      method: 'GET',\n      headers: this._headers\n    });\n    return this._handlePromiseRequest(response);\n  }\n  async updateProfileUserAvatar(data, token) {\n    const response = await fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        ...this._headers,\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    });\n    return this._handlePromiseRequest(response);\n  }\n}\nconst api = new Api(authenticationElemenetsApi);\nexport default api;","map":{"version":3,"names":["authenticationElemenetsApi","Api","constructor","_ref","headers","URL","_headers","_url","_handlePromiseRequest","res","ok","json","Error","addLike","cardId","token","response","fetch","method","Authorization","removeLike","getUserInfo","getInitialCardsData","getInitialData","Promise","all","editProfileInfo","data","console","log","body","JSON","stringify","name","about","avatar","removeCard","addNewCard","link","getCard","updateProfileUserAvatar","api"],"sources":["/Users/bogdanus/Desktop/dev/react-mesto-auth/src/utils/Api.js"],"sourcesContent":["import { authenticationElemenetsApi } from './constants';\n\nclass Api {\n  constructor({ headers, URL }) {\n    this._headers = headers;\n    this._url = URL;\n  }\n\n  _handlePromiseRequest(res) {\n    if (res.ok) {\n      return res.json();\n    } else throw new Error('ошибка');\n  }\n  async addLike(cardId, token) {\n    const response = await fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: { ...this._headers, Authorization: `Bearer ${token}` },\n    });\n    return this._handlePromiseRequest(response);\n  }\n\n  async removeLike(cardId) {\n    const response = await fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: { ...this._headers, Authorization: `Bearer ${token}` },\n    });\n\n    return this._handlePromiseRequest(response);\n  }\n\n  async getUserInfo(token) {\n    const response = await fetch(`${this._url}/users/me`, {\n      method: 'GET',\n      headers: { ...this._headers, Authorization: `Bearer ${token}` },\n    });\n    return this._handlePromiseRequest(response);\n  }\n\n  async getInitialCardsData(token) {\n    const response = await fetch(`${this._url}/cards`, {\n      headers: { ...this._headers, Authorization: `Bearer ${token}` },\n    });\n    return this._handlePromiseRequest(response);\n  }\n\n  getInitialData() {\n    return Promise.all([this.getInitialCardsData(), this.getUserInfo()]);\n  }\n\n  async editProfileInfo(data, token) {\n    console.log(data);\n    const response = await fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: { ...this._headers, Authorization: `Bearer ${token}` },\n\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about,\n        avatar: data.avatar,\n      }),\n    });\n\n    return this._handlePromiseRequest(response);\n  }\n\n  async removeCard(cardId) {\n    const response = await fetch(`${this._url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers,\n    });\n    return this._handlePromiseRequest(response);\n  }\n\n  async addNewCard(data, token) {\n    const response = await fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: { ...this._headers, Authorization: `Bearer ${token}` },\n\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link,\n      }),\n    });\n    return this._handlePromiseRequest(response);\n  }\n\n  async getCard(cardId) {\n    const response = await fetch(`${this._url}/cards/${cardId}`, {\n      method: 'GET',\n      headers: this._headers,\n    });\n    return this._handlePromiseRequest(response);\n  }\n\n  async updateProfileUserAvatar(data, token) {\n    const response = await fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: { ...this._headers, Authorization: `Bearer ${token}` },\n      body: JSON.stringify({\n        avatar: data.avatar,\n      }),\n    });\n    return this._handlePromiseRequest(response);\n  }\n}\nconst api = new Api(authenticationElemenetsApi);\nexport default api;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}